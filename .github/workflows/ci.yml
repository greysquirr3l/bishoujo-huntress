# Bishoujo-Huntress CI
# This workflow runs tests, static analysis, and security scanning on push and PR.

name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions: # added using https://github.com/step-security/secure-repo
  contents: read

jobs:
  build:
    permissions:
      contents: read # for actions/checkout to fetch code
      pull-requests: read # for golangci/golangci-lint-action to fetch pull requests
      security-events: write # for uploading SARIF results
    runs-on: ubuntu-latest # GitHub-hosted runner required for harden-runner
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Harden Runner
        if: github.actor != 'nektos/act' # Skip when running with ACT locally
        uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1 # v2.12.0
        with:
          egress-policy: block
          allowed-endpoints: |
            *.blob.core.windows.net:443
            *.githubusercontent.com:443
            api.github.com:443
            api.huntress.io:443
            api.osv.dev:443
            archive.ubuntu.com:443
            artifactcache.actions.githubusercontent.com:443
            cloud.google.com:443
            codeload.github.com:443
            dl.google.com:443
            files.pythonhosted.org:443
            ghcr.io:443
            github.com:443
            go.opentelemetry.io:443
            golang.org:443
            golangci-lint.run:443
            google.golang.org:443
            hosted-compute-watchdog-prod-eus-02.githubapp.com:443
            hosted-compute-watchdog-prod-iad-01.githubapp.com:443
            objects.githubusercontent.com:443
            oss-fuzz-build-logs.storage.googleapis.com:443
            packages.microsoft.com:443
            pkg-containers.githubusercontent.com:443
            proxy.golang.org:443
            pypi.org:443
            raw.githubusercontent.com:443
            registry.npmjs.org:443
            releases.github.com:443
            repo1.maven.org:443
            security.ubuntu.com:443
            semgrep.dev:443
            storage.googleapis.com:443
            sum.golang.org:443

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: "1.24.4"

      - name: Cache Go modules
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ github.job }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ github.job }}-
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Install golangci-lint
        run: |
          set -euo pipefail
          GOLANGCI_LINT_VERSION="v2.1.6"
          GOLANGCI_LINT_VERSION_NUM_ONLY=$(echo "${GOLANGCI_LINT_VERSION}" | sed 's/^v//')
          GOLANGCI_LINT_TARBALL="golangci-lint-${GOLANGCI_LINT_VERSION_NUM_ONLY}-linux-amd64.tar.gz"
          GOLANGCI_LINT_DIR="golangci-lint-${GOLANGCI_LINT_VERSION_NUM_ONLY}-linux-amd64"
          echo "Downloading golangci-lint ${GOLANGCI_LINT_VERSION}..."
          curl -sSfL -o "${GOLANGCI_LINT_TARBALL}" "https://github.com/golangci/golangci-lint/releases/download/${GOLANGCI_LINT_VERSION}/${GOLANGCI_LINT_TARBALL}"
          echo "Extracting ${GOLANGCI_LINT_TARBALL}..."
          tar -xzf "${GOLANGCI_LINT_TARBALL}"
          echo "Installing golangci-lint..."
          sudo mv "${GOLANGCI_LINT_DIR}/golangci-lint" /usr/local/bin/
          echo "Cleaning up..."
          rm -rf "${GOLANGCI_LINT_TARBALL}" "${GOLANGCI_LINT_DIR}"
          echo "golangci-lint installation complete."

      - name: Run golangci-lint (v2)
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          args: --timeout=5m
          github-token: ${{ secrets.GITHUB_TOKEN }}
          only-new-issues: false
          skip-cache: true # Using manually installed version

      - name: Print golangci-lint version and path (debug)
        run: |
          which golangci-lint || true
          golangci-lint --version || true

      - name: Run tests
        run: make test

      - name: Upload Test Coverage
        if: success() || failure() # Upload coverage even if tests fail to show what was covered
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage-report
          path: coverage.txt # Assuming your 'make test' generates 'coverage.txt'

      - name: Run all Go fuzz tests
        run: make fuzz FUZZTIME=60s # Time-box fuzzing
        continue-on-error: true # Do not fail CI if fuzz tests find issues, treat as advisory

      - name: Run security scanner (gosec)
        id: gosec_scan # Add an ID to reference the step
        uses: securego/gosec@d2d3ae66bd8d340b78b5142b6fe610691783c2fe # v2.22.5 # v2.22.4
        with:
          args: "-fmt=sarif -out=gosec-results.sarif ./..." # Output SARIF for upload

      - name: Upload Gosec SARIF results
        if: success() || failure() # Upload SARIF even if gosec finds issues
        uses: github/codeql-action/upload-sarif@b1e4dc3db58c9601794e22a9f6d28d45461b9dbf # codeql-bundle-v2.22.0 # v3.25.12
        with:
          sarif_file: gosec-results.sarif
          category: gosec
