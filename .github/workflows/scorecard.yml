# OSSF Scorecard workflow for security best practices
name: OSSF Scorecard
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    - cron: "0 12 * * 1"

permissions: {} # Deny all permissions by default at the workflow-level

jobs:
  scorecard:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      id-token: write
    steps:
      - name: Checkout code
        # OSSF Scorecard: SHA pinning required for supply chain security
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # - name: Call Reusable Network Pre-Check
      #  id: network_check
      #  uses: ./.github/workflows/reusable-network-check.yml

      - name: Harden Runner
        if: github.actor != 'nektos/act' # Skip when running with ACT locally
        uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1 # v2.12.0
        with:
          egress-policy: block
          allowed-endpoints: |
            *.blob.core.windows.net:443
            *.githubusercontent.com:443
            api.github.com:443
            api.huntress.io:443
            api.osv.dev:443
            archive.ubuntu.com:443
            artifactcache.actions.githubusercontent.com:443
            cloud.google.com:443
            codeload.github.com:443
            dl.google.com:443
            files.pythonhosted.org:443
            ghcr.io:443
            github.com:443
            go.opentelemetry.io:443
            golang.org:443
            golangci-lint.run:443
            google.golang.org:443
            objects.githubusercontent.com:443
            packages.microsoft.com:443
            pkg-containers.githubusercontent.com:443
            proxy.golang.org:443
            pypi.org:443
            raw.githubusercontent.com:443
            registry.npmjs.org:443
            releases.github.com:443
            repo1.maven.org:443
            security.ubuntu.com:443
            semgrep.dev:443
            storage.googleapis.com:443
            sum.golang.org:443
            hosted-compute-watchdog-prod-eus-02.githubapp.com:443
            hosted-compute-watchdog-prod-iad-01.githubapp.com:443
            objects.githubusercontent.com:443
            oss-fuzz-build-logs.storage.googleapis.com:443
            packages.microsoft.com:443
            pkg-containers.githubusercontent.com:443
            proxy.golang.org:443
            pypi.org:443
            raw.githubusercontent.com:443
            registry.npmjs.org:443
            repo1.maven.org:443
            security.ubuntu.com:443
            semgrep.dev:443
            storage.googleapis.com:443
            sum.golang.org:443

      - name: OSSF Scorecard action
        # OSSF Scorecard: SHA pinning required for supply chain security
        uses: ossf/scorecard-action@05b42c624433fc40578a4040d5cf5e36ddca8cde # v2.4.2 # v2.4.1
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

      - name: Upload Scorecard results to GitHub Security tab
        # OSSF Scorecard: SHA pinning required for supply chain security
        uses: github/codeql-action/upload-sarif@b1e4dc3db58c9601794e22a9f6d28d45461b9dbf # codeql-bundle-v2.22.0 # v3.25.12
        with:
          sarif_file: results.sarif

  ossf-artifacts:
    runs-on: ubuntu-latest
    needs: scorecard
    permissions:
      contents: read # For actions/checkout
      security-events: write # For github/codeql-action/upload-sarif
      actions: write # For actions/upload-artifact
      checks: write # For golangci-lint-action to create check annotations
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      #- name: Call Reusable Network Pre-Check
      #  id: network_check
      #  uses: ./.github/workflows/reusable-network-check.yml

      - name: Harden Runner # This is now a distinct step
        if: github.actor != 'nektos/act' # Skip when running with ACT locally
        uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1 # v2.12.0
        with:
          egress-policy: block
          allowed-endpoints: |
            *.blob.core.windows.net:443
            *.githubusercontent.com:443
            api.github.com:443
            api.huntress.io:443
            api.osv.dev:443
            archive.ubuntu.com:443
            artifactcache.actions.githubusercontent.com:443
            cloud.google.com:443
            codeload.github.com:443
            dl.google.com:443
            files.pythonhosted.org:443
            ghcr.io:443
            github.com:443
            go.opentelemetry.io:443
            golang.org:443
            golangci-lint.run:443
            google.golang.org:443
            hosted-compute-watchdog-prod-eus-02.githubapp.com:443
            hosted-compute-watchdog-prod-iad-01.githubapp.com:443
            objects.githubusercontent.com:443
            oss-fuzz-build-logs.storage.googleapis.com:443
            packages.microsoft.com:443
            pkg-containers.githubusercontent.com:443
            proxy.golang.org:443
            pypi.org:443
            raw.githubusercontent.com:443
            registry.npmjs.org:443
            releases.github.com:443
            repo1.maven.org:443
            security.ubuntu.com:443
            semgrep.dev:443
            storage.googleapis.com:443
            sum.golang.org:443
            raw.githubusercontent.com:443
            registry.npmjs.org:443
            repo1.maven.org:443
            security.ubuntu.com:443
            semgrep.dev:443
            storage.googleapis.com:443
            sum.golang.org:443

      - name: Install security tools
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y git curl make coreutils

          # Install golangci-lint (ensure GOLANGCI_LINT_VERSION is correct from Makefile/README)
          GOLANGCI_LINT_VERSION="v2.1.6"
          GOLANGCI_LINT_VERSION_NUM_ONLY=$(echo "${GOLANGCI_LINT_VERSION}" | sed 's/^v//')
          GOLANGCI_LINT_TARBALL="golangci-lint-${GOLANGCI_LINT_VERSION_NUM_ONLY}-linux-amd64.tar.gz"
          GOLANGCI_LINT_DIR="golangci-lint-${GOLANGCI_LINT_VERSION_NUM_ONLY}-linux-amd64"

          echo "Downloading golangci-lint ${GOLANGCI_LINT_VERSION}..."
          # Corrected organization 'golangci' and uses the version variables
          curl -sSfL -o "${GOLANGCI_LINT_TARBALL}" "https://github.com/golangci/golangci-lint/releases/download/${GOLANGCI_LINT_VERSION}/${GOLANGCI_LINT_TARBALL}"

          echo "Extracting ${GOLANGCI_LINT_TARBALL}..."
          tar -xzf "${GOLANGCI_LINT_TARBALL}"

          echo "Installing golangci-lint..."
          sudo mv "${GOLANGCI_LINT_DIR}/golangci-lint" /usr/local/bin/

          echo "Cleaning up..."
          rm -rf "${GOLANGCI_LINT_TARBALL}" "${GOLANGCI_LINT_DIR}"
          echo "golangci-lint installation complete."

          # Install gosec pinned version
          go install github.com/securego/gosec/v2/cmd/gosec@v2.22.4 # Updated to v2.22.4
          # Install govulncheck pinned version
          go install golang.org/x/vuln/cmd/govulncheck@v1.1.4
          # Install git-secrets pinned by commit
          GIT_SECRETS_COMMIT="ad82d68ee924906a0401dfd48de5057731a9bc84"
          git clone https://github.com/awslabs/git-secrets.git
          cd git-secrets && git checkout $GIT_SECRETS_COMMIT && sudo make install && cd .. && rm -rf git-secrets
          # Add Go bin to PATH
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Run golangci-lint (v2)
        id: golangci_lint_run # Added id to reference outputs
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          args: --timeout=5m
          github-token: ${{ secrets.GITHUB_TOKEN }}
          only-new-issues: false
          skip-cache: true # Using manually installed version

      - name: Upload golangci-lint SARIF results
        if: success() && steps.golangci_lint_run.outputs.sarif-filepath # Ensure the file path output exists
        uses: github/codeql-action/upload-sarif@b1e4dc3db58c9601794e22a9f6d28d45461b9dbf # codeql-bundle-v2.22.0 # v3.25.12
        with:
          sarif_file: ${{ steps.golangci_lint_run.outputs.sarif-filepath }}

      - name: Run OSSF attestation script
        run: ./ossf-attest.sh

      - name: Upload OSSF attestation artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ossf-attestation
          path: |
            golangci-lint.txt
            gosec.txt
            govulncheck.txt
            git-secrets.txt
            sbom.json
            test-results.txt
            coverage.txt
